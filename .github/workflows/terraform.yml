name: "Terraform"

on:
  push:
    branches:
      - main
      - feature/*

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - id: checkout
        uses: actions/checkout@v3

      - id: terraform-setup
        uses: hashicorp/setup-terraform@v2

      - id: init
        run: terraform init -no-color

      - id: plan
        run: terraform plan -no-color

      - id: apply
        run: terraform apply -no-color -auto-approve -input=false

      - id: output
        run: terraform output -no-color -json

      - id: print-output
        run: echo "${{ steps.output.outputs.stdout }}"

      - id: copy-host-template
        run: |
          cp ansible/hosts-template.ini ansible/hosts.ini
          echo "${{ steps.output.outputs.stdout }}" > ansible/terraformOut.json

      - id: get-controller-ip
        uses: mikefarah/yq@v4.33.2
        with:
          cmd: yq '.controller_ip_addr.value as $ip | $ip' ansible/terraformOut.json

      - id: get-node-ip
        uses: mikefarah/yq@v4.33.2
        with:
          cmd: yq '.node_ip_addr.value[0][] as $ips | $ips' ansible/terraformOut.json

      # TODO: Turn controllerIps into a list like nodeIps
      # TODO: Add node names to ansible config
      # TODO: Move generated hosts.ini to build/
      - id: host-template
        run: |
          export CONTROLLER_IPS=echo "${{ steps.get-controller-ip.outputs.result }}"
          export NODE_IPS=echo "${{ steps.get-node-ip.outputs.result }}"
          echo $CONTROLLER_IPS
          echo $NODE_IPS
          envsubst '$CONTROLLER_IPS' < ansible/hosts.ini
          envsubst '$NODE_IPS' < ansible/hosts.ini
          cat ansible/hosts.ini

#      - id: terraform-destroy
#        if: ${{ always() }}
#        run: terraform destroy -no-color -auto-approve -input=false
